*** Settings ***
Documentation       This keywords suite define common operation
Library             Collections
Library             HttpLibrary.HTTP
Library             OperatingSystem
Library             SSHLibrary
Resource            ./defaultconfig.txt
Resource            ../00_commonconfig.txt

*** Keywords ***
##############################################################################################
# Setup and Teardown
##############################################################################################
Network Setup
    Open HTTP Connection And Log In    @{PUBLICIP}[0]    ${UIADMIN}    ${UIPASS}
    Open All SSH Connections    ${USERNAME}    ${PASSWORD}    @{PUBLICIP}
    Open Connection    127.0.0.1    alias=127.0.0.1
    Login    ${LOCALUSER}    ${LOCALPASS}

Network Teardown
    Close All Connections


##############################################################################################
# Common operation
##############################################################################################
Open HTTP Connection And Log In
    [Arguments]    ${host}    ${username}    ${password}
    Create HTTP Context    ${host}:8080    https
    Return Code Should be 0    /cgi-bin/ezs3/json/login?user_id=${username}&password=${password}

Open All SSH Connections
    [Arguments]    ${username}    ${password}    @{ip_list}
    : FOR    ${ip}    IN    @{ip_list}
    \    Open Connection    ${ip}    alias=${ip}
    \    Login    ${username}    ${password}

Execute Command Successfully
    [Arguments]    ${cmd}
    ${rc}=    Execute Command    ${cmd}    return_stdout=False    return_rc=True
    Should Be Equal As Integers    ${rc}    0


##############################################################################################
# Cluster operation
##############################################################################################
Input License
    [Arguments]    ${storage_ip}    ${license_key}
    log    Input license key on node ${storage_ip}
    CGI License Set    ip=${storage_ip}    key=${license_key}

Get Product Type
    [Documentation]    To get product type, the return value is scaler/controler/converger
    log    Login background, get product type
    ${product_type}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    cat /etc/ezs3/product \ | awk -F " " '{print $NF}'
    log    ${product_type}
    [Return]    ${product_type}

Get ctdb Status
    log    Check ctdb status
    ${ctdb_status}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    ctdb status | grep -i pnn
    Should Contain X Times    ${ctdb_status}    OK    3

Get Cluster Health Status
    [Documentation]    To get cluster current health status
    ${health_status}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    ceph health detail
    Should Be Equal    ${health_status}    HEALTH_OK
    [Return]    ${health_status}

Get OSD State
    [Arguments]    ${storage_ip}    ${osd_state}=ONLINE    ${osd_name}=
    ${result}=    Get Return Json    /cgi-bin/ezs3/json/storage_volume_list?host=${storage_ip}
    log    OSD enable result: ${result}
    ${result}=    evaluate    ${result}
    log    Length of the list
    ${list_len}=    Get Length    ${result}
    log    Length of the list is : ${list_len}
    : FOR    ${i}    IN RANGE    ${list_len}
    \    ${res_lists_tmp}=    Get From List    ${result}    ${i}
    \    Run Keyword If    ${result}[${i}]['name']=='${osd_name}'    Exit For Loop
    ${res_lists}=    Set Variable    ${res_lists_tmp}
    log    Get result of list: ${res_lists}
    ${res_osd_state}=    Get From Dictionary    ${res_lists}    state
    Should Be Equal As Strings    ${res_osd_state}    ${osd_state}
    [Return]    ${osd_state}

##############################################################################################
# Storage operation
##############################################################################################
Create OSD Role
    [Arguments]    ${public_ip}    ${storage_ip}    ${osd_name}    ${data_dev}    ${sv_type}=0
    CGI Storage Volume Add    host=${storage_ip}    name=${osd_name}    data_devs=${data_dev}    sv_type=${sv_type}    enable_osd=false
    Enable OSD    public_ip=${public_ip}    storage_ip=${storage_ip}    osd_name=${osd_name}
    Wait Until Keyword Succeeds    4 min    5 sec    Get OSD State    ${storage_ip}    ONLINE    ${osd_name}

Disable OSD
    [Arguments]    ${storage_ip}    ${osd_name}
    CGI Node Role Disable OSD    ip=${storage_ip}    sv_list=${osd_name}    force=true
    Wait Until Keyword Succeeds    4 min    5 sec    Get OSD State    ${storage_ip}    OFFLINE    ${osd_name}

Remove OSD
    [Arguments]    ${storage_ip}    ${osd_name}
    Disable OSD    storage_ip=${storage_ip}    osd_name=${osd_name}
    Wait Until Keyword Succeeds    4 min    5 sec    Get Cluster Health Status
    ${osd_name_list}=    Create List    ${osd_name}
    CGI Storage Volume Remove    host=${storage_ip}    name=${osd_name_list}

Enable OSD
    [Arguments]    ${public_ip}    ${storage_ip}    ${osd_name}    ${pool_to_join}=${DEFAULT POOL}    ${add_metadata_pool}=true
    ${public_network}=    Do SSH CMD    ${public_ip}    ${DEFAULT USERNAME}    ${DEFAULT PASSWORD}    ifconfig | grep -i -B 1 ${public_ip} | grep -v 'inet' | awk -F " " '{print $1}' | sed s'/ //'g
    ${storage_network}=    Do SSH CMD    ${public_ip}    ${DEFAULT USERNAME}    ${DEFAULT PASSWORD}    ifconfig | grep -i -B 1 ${storage_ip} | grep -v 'inet' | awk -F " " '{print $1}' | sed s'/ //'g
    CGI Node Role Enable OSD    storage_ip=${storage_ip}    sv_list=${osd_name}    cluster_iface=${storage_network}   public_iface=${public_network}     pool_to_join=${pool_to_join}    add_metadata_pool=${add_metadata_pool}
    Wait Until Keyword Succeeds    4 min    5 sec    Get OSD State    ${storage_ip}    ONLINE    ${osd_name}


##############################################################################################
# WEB operation
##############################################################################################
Get Json Path Value
    [Arguments]    ${request}    ${json_path}
    GET    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    ${json_path}
    [Return]    ${rc}

Get Progress
    [Arguments]    ${request_url}    ${json_key}    ${progress}=100
    GET    ${request_url}
    ${body} =    Get Response Body
    ${json_data} =    Get Json Value    ${body}    ${json_key}
    log    ${json_data}
    Should Be Equal As Strings    ${json_data}    ${progress}

Get Return Code
    [Arguments]    ${request}
    GET    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    [Return]    ${rc}

Get Return Json
    [Arguments]    ${request}    ${json_key}=/response
    GET    ${request}
    ${body} =    Get Response Body
    ${json_data} =    Get Json Value    ${body}    ${json_key}
    [Return]    ${json_data}

POST Request
    [Arguments]    ${request}    ${post_url}
    Set Request Body    ${request}
    POST    ${post_url}
    Response Status Code Should Equal    200 OK

Post Return Code
    [Arguments]    ${request_body}    ${request}
    Set Request Body    ${request_body}
    POST    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    [Return]    ${rc}

Post Return Code Should be 0
    [Arguments]    ${request_body}    ${request}
    Set Request Body    ${request_body}
    POST    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    Should be Equal    ${rc}    0

Return Code Should be
    [Arguments]    ${request}    ${return_code}=0
    log    ${request}
    GET    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    Should be Equal    ${rc}    ${return_code}

Return Code Should be 0
    [Arguments]    ${request}
    Log    ${request}
    GET    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    Should be Equal    ${rc}    0


##############################################################################################
# SSH operation
##############################################################################################
Check If SSH Output Is Empty
    [Arguments]    ${cmd}    ${true_false}
    ${output}=    Execute Command    ${cmd}
    Run Keyword If    '${true_false}' == '${true}'    Should Be Empty    ${output}
    ...    ELSE IF    '${true_false}' == '${false}'    Should Not Be Empty    ${output}
    ...    ELSE    Fail    The parameter should be '${true}' or '${false}'

Do SSH CMD
    [Arguments]    ${host_ip}    ${root}    ${root_password}    ${cmd}    ${cmp_flag}=False    ${expect_result}=
    [Documentation]    ${cmp_flag} , it means if we need to do compare operation, the default vaule is False, means don't need to do the comparison.
    log    SSH login
    Open Connection    ${host_ip}
    ${con_output}=    Login    ${USERNAME}    ${PASSWORD}
    Should Contain    ${con_output}    Last login
    log    Do ssh command
    Start Command    ${cmd}
    ${stdout}=    Read Command Output
    Run Keyword If    ${cmp_flag}==${True}    Should Be Equal As Strings    ${stdout}    ${expect_result}
    [Return]    ${stdout}

SSH Output Should Be Equal
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Execute Command    ${cmd}
    Should be Equal    ${output}    ${expect}

SSH Output Should Contain
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Execute Command    ${cmd}
    Should Contain    ${output}    ${expect}

SSH Output Should Match
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Execute Command    ${cmd}
    Should Match    ${output}    ${expect}

SSH Output Should Not Contain
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Execute Command    ${cmd}
    Should Not Contain    ${output}    ${expect}


##############################################################################################
# iSCSI operation
##############################################################################################
Get Client Initiator Name
    Switch Connection    127.0.0.1
    ${client_initiator}=    Execute Command    cat /etc/iscsi/initiatorname.iscsi | grep InitiatorName= | cut -d '=' -f 2
    [Return]    ${client_initiator}

Get RBD Image Name
    [Arguments]    ${target_id}    ${volume_name}
    ${iscsi_list}=    CGI iSCSI List    target_id=${target_id}
    ${rbd_entry}=    Get From Dictionary    ${iscsi_list}    entry
    ${length}=    Get Length    ${rbd_entry}
    :FOR    ${INDEX}    IN RANGE    0    ${length}
    \    ${rbd_image_name}=    Run Keyword If    '${rbd_entry[${INDEX}]['scsi_id']}' == '${volume_name}'
    \    ...    Set Variable    ${rbd_entry[${INDEX}]['rbd_img']}
    \    Exit For Loop If    '${rbd_entry[${INDEX}]['scsi_id']}' == '${volume_name}'
    [Return]    ${rbd_image_name}


##############################################################################################
# NAS operation
##############################################################################################

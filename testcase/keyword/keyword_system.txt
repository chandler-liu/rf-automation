*** Settings ***
Documentation       This keywords suite define common operation
Resource            ./defaultconfig.txt
Resource            ../00_commonconfig.txt
Library             Collections
Library             HttpLibrary.HTTP
Library             OperatingSystem
Library             SSHLibrary

*** Keywords ***
##############################################################################################
# Setup and Teardown
##############################################################################################
Network Setup
    Open HTTP Connection And Log In    host=${DEFAULT WEB IP}    username=${DEFAULT WEB USERNAME}    password=${DEFAULT WEB PASSWORD}
    Open All SSH Connections    ${DEFAULT SSH USERNAME}    ${DEFAULT SSH PASSWORD}    @{PUBLICIP}
    Open Connection    127.0.0.1    alias=127.0.0.1
    Login    ${LOCALUSER}    ${LOCALPASS}

Network Teardown
    Close All Connections


##############################################################################################
# Common operation
##############################################################################################
Open HTTP Connection And Log In
    [Arguments]    ${host}    ${username}    ${password}
    Create HTTP Context    ${host}:8080    https
    Return Code Should be 0    /cgi-bin/ezs3/json/login?user_id=${username}&password=${password}

Open All SSH Connections
    [Arguments]    ${username}    ${password}    @{ip_list}
    : FOR    ${ip}    IN    @{ip_list}
    \    Open Connection    ${ip}    alias=${ip}
    \    Login    ${username}    ${password}

Execute Command Successfully
    [Arguments]    ${cmd}
    ${rc}=    Execute Command    ${cmd}    return_stdout=False    return_rc=True
    Should Be Equal As Integers    ${rc}    0


##############################################################################################
# Cluster operation
##############################################################################################
Get Cluster Health Status
    [Documentation]    To get cluster current health status
    ${health_status}=    Do SSH CMD    ${DEFAULT SSH IP}    ${DEFAULT SSH USERNAME}    ${DEFAULT SSH PASSWORD}    ceph health detail
    Should Be Equal    ${health_status}    HEALTH_OK
    [Return]    ${health_status}

Get Create Cluster Progress
    ${time_stamp}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    cat /var/log/ezcloudstor/ezarpc.log| grep "node.join_cluster has been updated with info {'progress': 100}" | sort -rn | head -1 | awk -F " " '{print $1,$2}' | sed 's/\\[/\"/' | sed 's/\\]/\"/'
    ${time_seconds}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    date -d ${time_stamp} +%s
    ${current_time}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    date +%s
    ${time_diff}=    Evaluate    ${current_time} - ${time_seconds}
    ${check_progress}=    Set Variable    False
    log    ---------------- \ ${check_progress} \ ----------------
    ${check_progress}    Run Keyword If    ${time_diff} > 300    Set Variable    False
    ...    ELSE    Set Variable    True
#    Should Be Equal    ${check_progress}    True
    Should Be True    ${check_progress}
    [Return]    ${check_progress}

Get CTDB Status
    [Arguments]     ${public_ip}=${DEFAULT SSH IP}
    ${ctdb_status}=    Do SSH CMD    ${public_ip}    ${DEFAULT SSH USERNAME}    ${DEFAULT SSH PASSWORD}    ctdb status | grep -i pnn
    [Return]    ${ctdb_status}

Get OSD State
    [Arguments]    ${storage_ip}    ${osd_name}=
    ${volume_info}=    CGI Storage Volume List    host=${storage_ip}
    ${length}=    Get Length    ${volume_info}
    :FOR    ${INDEX}    IN RANGE    0    ${length}
    \    ${osd_state}=    Run Keyword If    '${volume_info[${INDEX}]['name']}' == '${osd_name}'
    \    ...    Set Variable    ${volume_info[${INDEX}]['state']}
    \    Exit For Loop If    '${volume_info[${INDEX}]['name']}' == '${osd_name}'
    [Return]    ${osd_state}

Get Product Type
    [Documentation]    To get product type, the return value is scaler/controler/converger
    log    Login background, get product type
    ${product_type}=    Do SSH CMD    ${DEFAULT SSH IP}    ${DEFAULT SSH USERNAME}    ${DEFAULT SSH PASSWORD}    cat /etc/ezs3/product \ | awk -F " " '{print $NF}'
    log    ${product_type}
    [Return]    ${product_type}

Input License
    [Arguments]    ${storage_ip}    ${order}
    log    Input license key on node ${storage_ip}
    ${product_info}=    Get Product Type
    ${license_key}=    Set Variable If
    ...    '${product_info}'== 'Controller'    @{CONTROLLER_LICENSE}[${order}]
    ...    '${product_info}'== 'Scaler'        @{SCALER_LICENSE}[${order}]
    ...    '${product_info}'== 'Converger'     @{CONVERGER_LICENSE}[${order}]
    CGI License Set    ip=${storage_ip}    key=${license_key}

Enable Gateway
    [Arguments]    ${public_ip}    ${storage_ip}
    ${public_network}=    Do SSH CMD    ${public_ip}    ${DEFAULT SSH USERNAME}    ${DEFAULT SSH PASSWORD}    ifconfig | grep -i -B 1 ${public_ip} | grep -v 'inet' | awk -F " " '{print $1}' | sed s'/ //'g
    CGI Gateway Role Enable    storage_ip=${storage_ip}    public_iface=${public_network}

Create Pool
    [Arguments]    ${pool_name}    ${pool_type}    ${r}=2    ${k}=2    ${m}=1
    CGI Common Pool Create    pool_name=${pool_name}    pool_type=${pool_type}    r=${r}    k=${k}    m=${m}
    Wait Until Keyword Succeeds    4 min    5 sec    Check Pool Exist    ${pool_name}

Delete Pool
    [Arguments]    ${pool_name}
    CGI Common Pool Delete    pool_name=${pool_name}    delete_data=true
    Wait Until Keyword Succeeds    4 min    5 sec    Check Pool Nonexist    ${pool_name}

Add Node To Pool
    [Arguments]     ${pool_name}    @{node_ids}
    ${node_list}    Set Variable    @{node_ids}[0]
    ${length}=    Get Length    ${node_ids}
    :FOR    ${INDEX}    IN RANGE    1    ${length}
    \    ${node_list}    Set Variable    ${node_list}+@{node_ids}[${INDEX}]
    CGI Pool Add Node    pool_name=${pool_name}    node_list=${node_list}
    Wait Until Keyword Succeeds    4 min    5 sec    Check Pool Contain Node    ${pool_name}    ${node_list}  

Enable Maintenance Mode
    CGI Enable Maintenance Mode
    Check Maintenance Mode State    state=ON

Disable Maintenance Mode
    CGI Disable Maintenance Mode
    Check Maintenance Mode State    state=OFF
	
Enable Incremental Recovery
    CGI Enable Incremental Recovery
    Check Incremental Recovery State    state=ON

Disable Incremental Recovery
    CGI Disable Incremental Recovery
    Check Incremental Recovery State    state=OFF

Get OSD Reweight
	[Arguments]    ${pool_name}    ${changing}
	${osd_numbsers}=    DO SSH CMD    @{PUBLICIP}[0]    ${DEFAULT SSH USERNAME}    ${DEFAULT SSH PASSWORD}    ceph osd tree | sed -n "/pool ${pool_name}/,/pool /p" |grep "osd" | wc -l| sed 's/ //g'
    ${osd_index}=    Evaluate    ${osd_numbsers}-1
    ${before_reweight}=    DO SSH CMD    @{PUBLICIP}[0]    ${DEFAULT SSH USERNAME}    ${DEFAULT SSH PASSWORD}    ceph osd tree | grep -A 2 "${pool_name}_" | grep -v host| grep -v pool | grep osd.${osd_index} | awk -F " " '{print $2}'
    log    before_reweight: ${before_reweight}
    sleep    20
	${after_reweight}=    DO SSH CMD    @{PUBLICIP}[0]    ${DEFAULT SSH USERNAME}    ${DEFAULT SSH PASSWORD}    ceph osd tree | grep -A 2 "${pool_name}_" | grep -v host| grep -v pool | grep osd.${osd_index} | awk -F " " '{print $2}'
    log    after rewright: ${after_reweight}
	Run Keyword If    '${changing}'=='increasing'    Should Be True    ${after_reweight} > ${before_reweight}
    ...    ELSE IF    '${changing}'=='diminishing'    Should Be True    ${after_reweight} < ${before_reweight}
    
Down Up Reweight Change
	[Arguments]    ${folder_name}    ${vs_name}
	Stop OSD At Backend
    log    Create share folder and input data to this folder
    Add Shared Folder    name=${folder_name}    gateway_group=${vs_name}    nfs=true
    log    Write data to folder of ${folder_name}
    Write    cd /vol/${folder_name}
    Write    dd if=/dev/zero of=/vol/${folder_name}/test.txt bs=1M count=200
    log    type ceph osd dump to get recovery_weight
    ${before_recovery_weight}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    ceph osd dump | grep osd.0 | awk -F " " '{print $7}'
    Start OSD At Backend
    log    type ceph osd dump again, to get recovery_weight
    ${after_recovery_weight}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    ceph osd dump | grep osd.0 | awk -F " " '{print $7}'
    Should Be True    ${after_recovery_weight}<${before_recovery_weight}
    log    Check incremental rcovery speed
    ${first_get_recovery_weight}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    ceph osd dump | grep osd.0 | awk -F " " '{print $7}'
    sleep    10
    ${second_get_recovery_weight}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    ceph osd dump | grep osd.0 | awk -F " " '{print $7}'
    Should Be True    ${first_get_recovery_weight}<${second_get_recovery_weight}
    Should Be True    ${second_get_recovery_weight}<${before_recovery_weight}
	
	
##############################################################################################
# Storage operation
##############################################################################################
Create OSD Role
    [Arguments]    ${public_ip}    ${storage_ip}    ${osd_name}    ${data_dev}    ${sv_type}=0
    CGI Storage Volume Add    host=${storage_ip}    name=${osd_name}    data_devs=${data_dev}    sv_type=${sv_type}    enable_osd=false
    Enable OSD    public_ip=${public_ip}    storage_ip=${storage_ip}    osd_name=${osd_name}
    Wait Until Keyword Succeeds    4 min    5 sec    Check OSD State    ${storage_ip}    ${osd_name}    ONLINE

Create Volume
    [Arguments]    ${storage_ip}    ${osd_name}  ${fsType}  ${osdEngineType}    ${data_dev}
    CGI Storage Volume with Config Add    ${storage_ip}    ${osd_name}    ${fsType}    ${osdEngineType}     ${data_dev}
    ...    data    \    \    False    False    true
    Wait Until Keyword Succeeds    30 sec    5 sec    Check Storage Volume Exist    ${storage_ip}    ${osd_name}

Edit Volume
    [Arguments]    ${storage_ip}    ${osd_name}   ${cache_dev}   
    CGI Storage Volume Edit    ${storage_ip}    ${osd_name}    ${cache_dev}    \

Create OSD and Volume
    [Arguments]    ${public_ip}    ${storage_ip}    ${osd_name}  ${fsType}  ${osdEngineType}    ${data_dev}
    CGI Storage Volume with Config Add    ${storage_ip}    ${osd_name}    ${fsType}    ${osdEngineType}     ${data_dev}
    ...    data    \    \    False    False    true
    Wait Until Keyword Succeeds    30 sec    5 sec    Check Storage Volume Exist    ${storage_ip}    ${osd_name}
    Enable OSD    public_ip=${public_ip}    storage_ip=${storage_ip}    osd_name=${osd_name}
    Wait Until Keyword Succeeds    4 min    5 sec    Check OSD State    ${storage_ip}    ${osd_name}    ONLINE

Create Batch OSD and Volume
    [Arguments]    ${public_ip}    ${storage_ip}    ${osd_name}  ${fsType}  ${osdEngineType}    ${data_devs}
    CGI Storage Volume with Config Batch Add    ${storage_ip}    ${osd_name}    ${fsType}    ${osdEngineType}     ${data_devs}
    ...    data    \    \    False    False    true
    ${length}=    Get Length    ${data_devs}
    :FOR    ${INDEX}    IN RANGE    0    ${length}
    \    Wait Until Keyword Succeeds    30 sec    5 sec    Check Storage Volume Exist    ${storage_ip}    g-${osd_name}-${INDEX}
    \    Enable OSD    public_ip=${public_ip}    storage_ip=${storage_ip}    osd_name=g-${osd_name}-${INDEX}
    \    Wait Until Keyword Succeeds    4 min    5 sec    Check OSD State    ${storage_ip}    g-${osd_name}-${INDEX}    ONLINE
    \    Wait Until Keyword Succeeds    4 min    5 sec    Check Role Status    ${storage_ip}    role=osd    status=enabled

Disable OSD
    [Arguments]    ${storage_ip}    ${osd_name}    ${force}=true
    CGI Node Role Disable OSD    ip=${storage_ip}    sv_list=${osd_name}    force=${force}
	Run Keyword If    '${force}'=='false'    Wait Until Keyword Succeeds    4 min    5 sec    Check OSD State    ${storage_ip}    ${osd_name}    DISABLING
    ...    ELSE IF    '${force}'=='true'    Wait Until Keyword Succeeds    4 min    5 sec    Check OSD State    ${storage_ip}    ${osd_name}    OFFLINE

Disable Batch OSD
    [Arguments]    ${storage_ip}    ${osd_name}    ${data_devs}    ${force}=true
    ${length}=    Get Length    ${data_devs}
    ${osd_name_list}    Set Variable    g-${osd_name}-0
    :FOR    ${INDEX}    IN RANGE    1    ${length}
    \    ${osd_name_list}    Set Variable    ${osd_name_list}+g-${osd_name}-${INDEX}
    CGI Node Role Disable OSD    ip=${storage_ip}    sv_list=${osd_name_list}    force=${force}
	:FOR    ${INDEX}    IN RANGE    0    ${length}
	\    Run Keyword If    '${force}'=='false'    Wait Until Keyword Succeeds    4 min    5 sec    Check OSD State    ${storage_ip}    g-${osd_name}-${INDEX}    DISABLING
    \    ...    ELSE IF    '${force}'=='true'    Wait Until Keyword Succeeds    4 min    5 sec    Check OSD State    ${storage_ip}    g-${osd_name}-${INDEX}    OFFLINE

Enable OSD
    [Arguments]    ${public_ip}    ${storage_ip}    ${osd_name}    ${pool_to_join}=${DEFAULT POOL}    ${add_metadata_pool}=true
    ${public_network}=    Do SSH CMD    ${public_ip}    ${DEFAULT SSH USERNAME}    ${DEFAULT SSH PASSWORD}    ifconfig | grep -i -B 1 ${public_ip} | grep -v 'inet' | awk -F " " '{print $1}' | sed s'/ //'g
    ${storage_network}=    Do SSH CMD    ${public_ip}    ${DEFAULT SSH USERNAME}    ${DEFAULT SSH PASSWORD}    ifconfig | grep -i -B 1 ${storage_ip} | grep -v 'inet' | awk -F " " '{print $1}' | sed s'/ //'g
    CGI Node Role Enable OSD    storage_ip=${storage_ip}    sv_list=${osd_name}    cluster_iface=${storage_network}   public_iface=${public_network}     pool_to_join=${pool_to_join}    add_metadata_pool=${add_metadata_pool}
    Wait Until Keyword Succeeds    4 min    5 sec    Check OSD State    ${storage_ip}    ${osd_name}    ONLINE

Remove OSD
    [Arguments]    ${storage_ip}    ${osd_name}
    Disable OSD    storage_ip=${storage_ip}    osd_name=${osd_name}
    Wait Until Keyword Succeeds    4 min    5 sec    Get Cluster Health Status
    Wait Until Keyword Succeeds    4 min    5 sec    Check Role Status Is Not   ${storage_ip}    role=osd    status=stoping
    ${osd_name_list}=    Create List    ${osd_name}
    CGI Storage Volume Remove    host=${storage_ip}    name=${osd_name_list}
	Wait Until Keyword Succeeds    4 min    5 sec    Check Storage Volume Nonexist    ${storage_ip}    ${osd_name}

Delete OSD
    [Arguments]    ${storage_ip}    ${osd_name}
    ${osd_name_list}=    Create List    ${osd_name}
    CGI Storage Volume Remove    host=${storage_ip}    name=${osd_name_list}
	Wait Until Keyword Succeeds    4 min    5 sec    Check Storage Volume Nonexist    ${storage_ip}    ${osd_name}

Delete Batch OSD
    [Arguments]    ${storage_ip}    ${osd_name}    ${data_devs}
    @{osd_name_list}=    Create List
    ${length}=    Get Length    ${data_devs}
    :FOR    ${INDEX}    IN RANGE    0    ${length}
    \    Append To List    ${osd_name_list}    g-${osd_name}-${INDEX}
    CGI Storage Volume Remove    host=${storage_ip}    name=${osd_name_list}
	:FOR    ${INDEX}    IN RANGE    0    ${length}
	\    Wait Until Keyword Succeeds    4 min    5 sec    Check Storage Volume Nonexist    ${storage_ip}    g-${osd_name}-${INDEX}

Scan Fix OSD
    [Arguments]    ${storage_ip}    ${osd_name}
    CGI Storage Volume Scan    ${storage_ip}    ${osd_name}
    Wait Until Keyword Succeeds    4 min    5 sec    Check OSD State    ${storage_ip}    ${osd_name}    SCANNING

Reformat OSD
    [Arguments]    ${storage_ip}    ${osd_name}
    CGI Storage Volume Reformat    ${storage_ip}    ${osd_name}
    Wait Until Keyword Succeeds    4 min    5 sec    Check OSD State    ${storage_ip}    ${osd_name}    REFORMATING
	
Stop OSD At Backend
    Wait Until Keyword Succeeds    3 min    5 sec    SSH Output Should Contain    /etc/init.d/ceph stop osd.0    Exit Code: 0x00

Start OSD At Backend
	Wait Until Keyword Succeeds    3 min    5 sec    SSH Output Should Contain    /etc/init.d/ceph start osd.0    Exit Code: 0x00
	log    Check osd status
    Wait Until Keyword Succeeds    3 min    5 sec    SSH Output Should Contain    ceph osd tree | grep osd.0    up

##############################################################################################
# WEB operation
##############################################################################################
Get Json Path Value
    [Arguments]    ${request}    ${json_path}
    GET    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    ${json_path}
    [Return]    ${rc}

Get Progress
    [Arguments]    ${request_url}    ${json_key}    ${progress}=100
    GET    ${request_url}
    ${body} =    Get Response Body
    ${json_data} =    Get Json Value    ${body}    ${json_key}
    log    ${json_data}
    Should Be Equal As Strings    ${json_data}    ${progress}

Get Return Code
    [Arguments]    ${request}
    GET    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    [Return]    ${rc}

Get Return Json
    [Arguments]    ${request}    ${json_key}=/response
    GET    ${request}
    ${body} =    Get Response Body
    ${json_data} =    Get Json Value    ${body}    ${json_key}
    [Return]    ${json_data}

POST Request
    [Arguments]    ${request}    ${post_url}
    Set Request Body    ${request}
    POST    ${post_url}
    Response Status Code Should Equal    200 OK

Post Return Code
    [Arguments]    ${request_body}    ${request}
    Set Request Body    ${request_body}
    POST    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    [Return]    ${rc}

Post Return Code Should be 0
    [Arguments]    ${request_body}    ${request}
    Set Request Body    ${request_body}
    POST    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    Should be Equal    ${rc}    0

Return Code Should be
    [Arguments]    ${request}    ${return_code}=0
    log    ${request}
    GET    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    Should be Equal    ${rc}    ${return_code}

Return Code Should be 0
    [Arguments]    ${request}
    Log    ${request}
    GET    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    Should be Equal    ${rc}    0


##############################################################################################
# SSH operation
##############################################################################################
Check If SSH Output Is Empty
    [Arguments]    ${cmd}    ${true_false}
    ${output}=    Execute Command    ${cmd}
    Run Keyword If    '${true_false}' == '${true}'    Should Be Empty    ${output}
    ...    ELSE IF    '${true_false}' == '${false}'    Should Not Be Empty    ${output}
    ...    ELSE    Fail    The parameter should be '${true}' or '${false}'

Do SSH CMD
    [Arguments]    ${host_ip}    ${username}    ${password}    ${cmd}    ${cmp_flag}=False    ${expect_result}=
    [Documentation]    ${cmp_flag} , it means if we need to do compare operation, the default vaule is False, means do not need to do the comparison.
    log    SSH login
    Open Connection    ${host_ip}
    ${con_output}=    Login    ${username}    ${password}
    log    Do ssh command
    Start Command    ${cmd}
    ${stdout}=    Read Command Output
    Run Keyword If    ${cmp_flag}==${True}    Should Be Equal As Strings    ${stdout}    ${expect_result}
    [Return]    ${stdout}

SSH Output Should Be Equal
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Execute Command    ${cmd}
    Should be Equal    ${output}    ${expect}

SSH Output Should Contain
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Execute Command    ${cmd}
    Should Contain    ${output}    ${expect}

SSH Output Should Match
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Execute Command    ${cmd}
    Should Match    ${output}    ${expect}

SSH Output Should Not Contain
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Execute Command    ${cmd}
    Should Not Contain    ${output}    ${expect}


##############################################################################################
# iSCSI operation
##############################################################################################
Get Client Initiator Name
    Switch Connection    127.0.0.1
    ${client_initiator}=    Execute Command    cat /etc/iscsi/initiatorname.iscsi | grep InitiatorName= | cut -d '=' -f 2
    [Return]    ${client_initiator}

Get RBD Image Name
    [Arguments]    ${target_id}    ${volume_name}
    ${iscsi_list}=    CGI iSCSI List    target_id=${target_id}
    ${rbd_entry}=    Get From Dictionary    ${iscsi_list}    entry
    ${length}=    Get Length    ${rbd_entry}
    :FOR    ${INDEX}    IN RANGE    0    ${length}
    \    ${rbd_image_name}=    Run Keyword If    '${rbd_entry[${INDEX}]['scsi_id']}' == '${volume_name}'
    \    ...    Set Variable    ${rbd_entry[${INDEX}]['rbd_img']}
    \    Exit For Loop If    '${rbd_entry[${INDEX}]['scsi_id']}' == '${volume_name}'
    [Return]    ${rbd_image_name}


##############################################################################################
# NAS operation
##############################################################################################
Add Shared Folder
    [Arguments]    ${name}    ${gateway_group}=Default    ${nfs}=true    ${smb}=true    ${read_only}=false    ${s3_folder}=false    ${bucket}=    ${mode}=sync    ${hidden}=false
    ...    ${write_list}=    ${smb_allowed_hosts}=    ${nfs_allowed_hosts}=    ${guest_ok}=false    ${guest_only}=false    ${user_list}=    ${cephfs}=cephfs    ${pool}=data
    ...    ${migrate_folder}=false    ${migrate_gw_ip}=    ${migrate_server}=    ${migrate_fs_type}=cifs    ${migrate_windows_host}=false    ${migrate_path}=    ${migrate_copyup}=open
    ...    ${migrate_account}=    ${migrate_passwd}=    ${migrate_cifsacl}=false    ${migrate_fs_options}=
    CGI Create Shared Folder    ${name}    ${gateway_group}    ${nfs}    ${smb}    ${read_only}    ${s3_folder}    ${bucket}    ${mode}    ${hidden}
    ...    ${write_list}    ${smb_allowed_hosts}    ${nfs_allowed_hosts}    ${guest_ok}    ${guest_only}    ${user_list}    ${cephfs}    ${pool}
    ...    ${migrate_folder}    ${migrate_gw_ip}    ${migrate_server}    ${migrate_fs_type}    ${migrate_windows_host}    ${migrate_path}    ${migrate_copyup}
    ...    ${migrate_account}    ${migrate_passwd}    ${migrate_cifsacl}    ${migrate_fs_options}
	Wait Until Keyword Succeeds    4 min    5 sec    Check Shared Folder Exist UI   ${name}    ${gateway_group}
	Wait Until Keyword Succeeds    4 min    5 sec    Check Shared Folder Exist    ${name}    ${gateway_group}

Delete Shared Folder
	[Arguments]    ${gateway_group}    @{names}
	${length}=    Get Length    @{names}
	${name_list}=    Set Variable    @{names}[0]
	:FOR    ${INDEX}    IN RANGE    1    ${length}
	\    ${name_list}=    Set Variable    ${name_list},@{names}[${INDEX}]
	CGI Delete Multi Shared Folder    ${name_list}    ${gateway_group}
	:FOR    ${INDEX}    IN RANGE    0    ${length}
	\    Wait Until Keyword Succeeds    4 min    5 sec    Check Shared Folder Nonexist UI   @{names}[${INDEX}]    ${gateway_group}
	\    Wait Until Keyword Succeeds    4 min    5 sec    Check Shared Folder Nonexist    @{names}[${INDEX}]    ${gateway_group}
	
	
*** Settings ***
Documentation       This keywords suite define API operation
Resource            ./defaultconfig.txt
Resource            ../00_commonconfig.txt
Library             HttpLibrary.HTTP
Library             ../pylibrary/JsonParser.py
# Example #### Description imported Json Library function
# Search Key Value : Search dict Key match special Value in Json, return match dict
# Query Key : Return dict Key for input Json
# Query Keyword Value : Return the value for match dict keyword
# URL Encode : Return Value by URL Encode
# URL Json Encode : Return List/Array by URL Encode

*** Keywords ***
# Example #### Description API function by API document, default configuration import from resource file "defaultconfig.txt"

# Get /ezs3/json/create_cluster, Create a cluster.
CGI Create Cluster    
    [Arguments]    ${test_version}='V7.0'    ${mon_num}=3
    Open HTTP Connection And Log In    ${DEFAULT SSH IP}    ${DEFAULT SSH USERNAME}    ${DEFAULT SSH PASSWORD}
    ${create_cluster_url}=    Run Keyword If    ${test_version}==${Version} and ${mon_num} ==3    Set Variable    /cgi-bin/ezs3/json/create_cluster?admin_account=${DEFAULT WEB USERNAME}&admin_passwd=${DEFAULT WEB PASSWORD}&cluster_name=AutoTest&license_key=&mons=@{STORAGEIP}[1]+@{STORAGEIP}[2]&nodes=@{STORAGEIP}[0]+@{STORAGEIP}[1]+@{STORAGEIP}[2]&ntp_server_list=${NTPSERVER}&rack_id=0&rep_no=2&use_rack_aware=false
    ...    ELSE IF    ${test_version}==${Version} and ${mon_num}==1    Set Variable    /cgi-bin/ezs3/json/create_cluster?admin_account=${DEFAULT WEB USERNAME}&admin_passwd=${DEFAULT WEB PASSWORD}&cluster_name=AutoTest&license_key=&mons=&nodes=@{STORAGEIP}[0]+@{STORAGEIP}[1]+@{STORAGEIP}[2]&ntp_server_list=${NTPSERVER}&rack_id=0&rep_no=2&use_rack_aware=false
    ...    ELSE IF    ${test_version}==${Version} and ${mon_num}==2    Set Variable    /cgi-bin/ezs3/json/create_cluster?admin_account=${DEFAULT WEB USERNAME}&admin_passwd=${DEFAULT WEB PASSWORD}&cluster_name=AutoTest&license_key=&mons=@{STORAGEIP}[1]&nodes=@{STORAGEIP}[0]+@{STORAGEIP}[1]+@{STORAGEIP}[2]&ntp_server_list=${NTPSERVER}&rack_id=0&rep_no=2&use_rack_aware=false
    ...    ELSE    Set Variable    /cgi-bin/ezs3/json/create_cluster?admin_account=${DEFAULT WEB USERNAME}&admin_passwd=${DEFAULT WEB PASSWORD}&cluster_name=AutoTest&license_key=&mons=&nodes=@{STORAGEIP}[0]+@{STORAGEIP}[1]+@{STORAGEIP}[2]&ntp_server_list=&rep_no=2
    Return Code Should be    ${create_cluster_url}    0
    Return Code Should be    /cgi-bin/ezs3/json/add_cluster_nodes_progress    0

#GET /ezs3/json/gateway_role_disable, Disable gateway role of a node.
CGI Gateway Role Disable
    [Arguments]    ${storage_ip}
    Return Code Should Be    /cgi-bin/ezs3/json/gateway_role_disable?ip=${storage_ip}    0

#GET /ezs3/json/gateway_role_enable, Enable gateway role of a node.
CGI Gateway Role Enable
    [Arguments]    ${storage_ip}    ${public_iface}
    Return Code Should Be    /cgi-bin/ezs3/json/gateway_role_enable?ip=${storage_ip}&public_iface=${public_iface}    0

# GET /ezs3/json/iscsi_list, Return a list of volumes of a iSCSI/FC target exported by a virtual storage.
CGI iSCSI List
    [Arguments]    ${target_id}=
    ${target_id_urlencode}=    URL Encode    ${target_id}
    ${iscsi_list}=    Get Return Json    /cgi-bin/ezs3/json/iscsi_list?target_id=${target_id_urlencode}    /response
    ${iscsi_list_parse}=    Parse Json    ${iscsi_list}
    [Return]    ${iscsi_list_parse}

# GET /ezs3/json/initiator_group_delete, Delete specified iSCSI/FC initiator groups.
CGI Initiator Group Delete
    [Arguments]    ${gateway_group}=${DEFAULT GATEWAY GROUP}    ${group_ids}=[]
    ${group_ids_urlencode}=    URL Encode    ${group_ids}
    Return Code Should be    /cgi-bin/ezs3/json/initiator_group_delete?gateway_group=${gateway_group}&group_ids=${group_ids_urlencode}    0

# GET /ezs3/json/initiator_group_list, List all iSCSI/FC initiator groups of a virtual storage.
CGI Initiator Group List
    [Arguments]    ${gateway_group}=${DEFAULT GATEWAY GROUP}
    ${initiator_entry}=    Get Return Json    /cgi-bin/ezs3/json/initiator_group_list?gateway_group=${gateway_group}    /response
    ${initiator_entry_parse}=    Parse Json    ${initiator_entry}
    [Return]    ${initiator_entry_parse}

#GET /ezs3/json/license_info_get, Return license information of all nodes.
CGI License Info Get
    ${license_info}=    Get Return Json    /cgi-bin/ezs3/json/license_info_get    /response
    ${license_info}    evaluate    ${license_info}
    [Return]    ${license_info}

# GET /ezs3/json/license_set, Input license key to activate a given node.
CGI License Set
    [Arguments]    ${ip}    ${key}
    Wait Until Keyword Succeeds    3 min    5 sec    Return Code Should be    /cgi-bin/ezs3/json/license_set?ip=${ip}&key=${key}    0

# GET /ezs3/json/mds_role_disable, Disable mds role of a node.
CGI MDS Role Disable
    [Arguments]    ${ip}
    Return Code Should Be    /cgi-bin/ezs3/json/mds_role_disable?ip=${ip}    0

# GET /ezs3/json/mds_role_enable, Enable mds role of a node.
CGI MDS Role Enable
    [Arguments]    ${ip}
    Return Code Should Be    /cgi-bin/ezs3/json/mds_role_enable?ip=${ip}    0

# GET /ezs3/json/node_role_disable_osd, Disable OSD role of a node. You can specify several storage volumes to disable multiple OSDs at the same time.
CGI Node Role Disable OSD
    [Arguments]    ${ip}    ${sv_list}    ${force}
    Return Code Should Be    /cgi-bin/ezs3/json/node_role_disable_osd?ip=${ip}&sv_list=${sv_list}&force=${force}    0

# GET /ezs3/json/node_role_enable_osd, Enable OSD role of a node. You can specify several storage volumes to enable multiple OSDs at the same time.
CGI Node Role Enable OSD
    [Arguments]    ${storage_ip}    ${sv_list}    ${cluster_iface}    ${public_iface}    ${pool_to_join}=${DEFAULT POOL}    ${add_metadata_pool}=false
    Return Code Should Be    /cgi-bin/ezs3/json/node_role_enable_osd?ip=${storage_ip}&sv_list=${sv_list}&cluster_iface=${cluster_iface}&public_iface=${public_iface}&pool_to_join=${pool_to_join}&add_metadata_pool=${add_metadata_pool}    0

# GET /ezs3/json/node_roles, Return all role states of nodes.
CGI Node Roles
    [Arguments]    @{hosts}
    ${hosts_url_encode}=    URL Json Encode    ${hosts}
    ${node_roles}=    Get Return Json    /cgi-bin/ezs3/json/node_roles?hosts=${hosts_url_encode}    /response
#    ${node_roles_parse}=    Parse Json    ${node_roles}
#    [Return]    ${node_roles_parse}
    ${node_roles}    evaluate    ${node_roles}
    [Return]    ${node_roles}

# POST /ezs3/json/storage_volume_add, Create a storage volume on a node.
# data_devs provide device list [/dev/sdb,/dev/sdc] by Create List
CGI Storage Volume Add
    [Arguments]    ${host}    ${name}    ${data_devs}    ${sv_type}=0    ${journal_dev}=data    ${cache_devs}=    ${spare_devs}=[]    ${dedup}=false    ${compress}=false    ${write_cache}=false    ${enable_osd}=false
    ${data_devs_url_encode}=    URL Json Encode    ${data_devs}
    ${spare_devs_url_encode}=    URL Json Encode    ${spare_devs}
    ${post_body}=    Set Variable    host=${host}&name=${name}&sv_type=${sv_type}&data_devs=${data_devs_url_encode}&journal_dev=${journal_dev}&cache_dev=${cache_devs}&spare_devs=${spare_devs_url_encode}&dedup=${dedup}&compress=${compress}&write_cache=${write_cache}&enable_osd=${enable_osd}
    POST Request   ${post_body}    /cgi-bin/ezs3/json/storage_volume_add

# GET /ezs3/json/storage_volume_list, Return all storage volumes settings of current node.
CGI Storage Volume List
    [Arguments]    ${host}
    ${storage_volume}=    Get Return Json    /cgi-bin/ezs3/json/storage_volume_list?host=${host}    /response
    ${storage_volume_parse}=    Parse Json    ${storage_volume}
    [Return]    ${storage_volume_parse}

# POST /ezs3/json/storage_volume_remove, Remove storage volumes on a node.
# name provide device list [/dev/sdb,/dev/sdc] by Create List
CGI Storage Volume Remove
    [Arguments]    ${host}    ${name}
    ${name_url_encode}=    URL Json Encode    ${name}
    ${post_body}=    Set Variable    host=${host}&names=${name_url_encode}
    ${delete_osd_url}=    Set Variable    /cgi-bin/ezs3/json/storage_volume_remove
    POST Request    ${post_body}    /cgi-bin/ezs3/json/storage_volume_remove

# POST /ezs3/json/storage_volume_with_config_add
# data_devs provide device list [/dev/sdb,/dev/sdc] by Create List
CGI Storage Volume with Config Add
    [Arguments]    ${storage_ip}    ${osd_name}    ${fsType}=ext4    ${osdEngineType}=BigteraStore    ${data_dev}=
    ...    ${journal}=data    ${cache_dev}=    ${spare_devs}=    ${compress}=False    ${dedup}=False    ${memoryConserve}=true
    @{data_devs_list}=    Create List
    Append To List    ${data_devs_list}    ${data_dev}
    @{cache_list}=    Create List
    Append To List    ${cache_list}    ${cache_dev}
    @{spare_list}=    Create List
    Append To List    ${spare_list}    ${spare_devs}

    &{svsConfig_dict}=    Create Dictionary    name=${osd_name}    fsType=${fsType}    osdEngineType=${osdEngineType}    data=${data_devs_list}    journal=${journal}
    ...    cache=${cache_list}    spare=${spare_list}    compress=${compress}    dedup=${dedup}    memoryConserve=${memoryConserve}
    @{svsConfig_list}=    Create List    ${svsConfig_dict}
    ${svsConfig_list_urlencode}=    URL JSON Encode    ${svsConfig_list}

    Set Request Body    host=${storage_ip}&svsConfig=${svsConfig_list_urlencode}
    POST    /cgi-bin/ezs3/json/storage_volume_with_config_add
    Response Status Code Should Equal    200 OK

CGI Storage Volume with Config Batch Add
    [Arguments]    ${storage_ip}    ${osd_name}    ${fsType}=ext4    ${osdEngineType}=BigteraStore    ${data_devs}=
    ...    ${journal}=data    ${cache_dev}=    ${spare_devs}=    ${compress}=False    ${dedup}=False    ${memoryConserve}=true   
    @{svsConfig_list}=    Create List
    ${length}=    Get Length    ${data_devs}
    :FOR    ${INDEX}    IN RANGE    0    ${length}
    \    &{svsConfig_dict}=    Create Dictionary    name=g-${osd_name}-${INDEX}    fsType=${fsType}    osdEngineType=${osdEngineType}    data=@{data_devs}[${INDEX}]    journal=${journal}
    \    ...    cache=${cache_dev}    spare=${spare_devs}    compress=${compress}    dedup=${dedup}    memoryConserve=${memoryConserve}
    \    Append To List    ${svsConfig_list}    ${svsConfig_dict}
    ${svsConfig_list_urlencode}=    URL JSON Encode    ${svsConfig_list}

    Set Request Body    host=${storage_ip}&svsConfig=${svsConfig_list_urlencode}
    POST    /cgi-bin/ezs3/json/storage_volume_with_config_add
    Response Status Code Should Equal    200 OK

CGI Storage Volume Edit
    [Arguments]    ${storage_ip}    ${osd_name}   ${cache_dev}    ${spare_dev}
    @{cache_dev_list}=    Create List    ${cache_dev}
    @{spare_dev_list}=    Create List    ${spare_dev}
    ${cache_dev_urlencode}=    URL JSON Encode    ${cache_dev_list}
    ${spare_dev_urlencode}=    URL JSON Encode    ${spare_dev_list}
    Set Request Body    host=${storage_ip}&name=${osd_name}&cache_devs=${cache_dev_urlencode}&spare_devs=${spare_dev_urlencode}
    POST    /cgi-bin/ezs3/json/storage_volume_edit
    Response Status Code Should Equal    200 OK

CGI Common Pool Create
    [Arguments]    ${pool_name}    ${pool_type}    ${r}    ${k}    ${m}
    ${rep_value}=    Set Variable    {"r":"${r}"}
    ${ec_value}=    Set Variable    {"k":"${k}","m":"${m}"}
    ${setting_list}=    Set Variable If    
    ...    '${pool_type}'=='1'    ${rep_value}
    ...    '${pool_type}'=='3'    ${ec_value}
    Return Code Should Be    /cgi-bin/ezs3/json/pool_create?pool_name=${pool_name}&pool_type=${pool_type}&settings=${setting_list}    0  
    
CGI Pool List
    ${pool}=    Get Return Json    /cgi-bin/ezs3/json/pool_list    /response/pools/pool
    ${pool_parse}=    Parse Json    ${pool}
    [Return]    ${pool_parse}

CGI Common Pool Delete
    [Arguments]    ${pool_name}    ${delete_data}
    Return Code Should Be    /cgi-bin/ezs3/json/pool_delete?pool_name=${pool_name}&delete_data=${delete_data}    0

CGI Pool Add Node
    [Arguments]    ${pool_name}    ${node_list}
    Return Code Should Be    /cgi-bin/ezs3/json/pool_add_node?pool_id=${pool_name}&node_ids=${node_list}    0

CGI Pool List Node
    [Arguments]    ${pool_name}
    ${get_node_list}=    Get Return Json    /cgi-bin/ezs3/json/pool_list_node?pool_name=${pool_name}    /response/nodes/node
    ${pool_parse}=    Parse Json    ${get_node_list}
    [Return]    ${pool_parse}

CGI Storage Volume Scan
    [Arguments]    ${storage_ip}    ${osd_name}
    ${repair_osd_body}=    Set Variable    host=${storage_ip}&names=%5B%22${osd_name}%22%5D
    ${repair_osd_url}=    Set Variable    /cgi-bin/ezs3/json/storage_volume_scan
    Post Return Code Should be 0    ${repair_osd_body}    ${repair_osd_url}

CGI Storage Volume Reformat
    [Arguments]    ${storage_ip}    ${osd_name}
    ${repair_osd_body}=    Set Variable    host=${storage_ip}&names=%5B%22${osd_name}%22%5D
    ${repair_osd_url}=    Set Variable    /cgi-bin/ezs3/json/storage_volume_reformat
    Post Return Code Should be 0    ${repair_osd_body}    ${repair_osd_url}

CGI Enable Maintenance Mode
	Return Code Should Be    /cgi-bin/ezs3/json/enable_maintenance_mode    0

CGI Disable Maintenance Mode
	Return Code Should Be    /cgi-bin/ezs3/json/disable_maintenance_mode    0
	
CGI Enable Incremental Recovery
	Return Code Should Be    /cgi-bin/ezs3/json/enable_incremental_recovery    0

CGI Disable Incremental Recovery
	Return Code Should Be    /cgi-bin/ezs3/json/disable_incremental_recovery    0
	
CGI Create Shared Folder
	[Arguments]    ${name}    ${gateway_group}=Default    ${nfs}=true    ${smb}=true    ${read_only}=false    ${s3_folder}=false    ${bucket}=    ${mode}=sync    ${hidden}=false
    ...    ${write_list}=    ${smb_allowed_hosts}=    ${nfs_allowed_hosts}=    ${guest_ok}=false    ${guest_only}=false    ${user_list}=    ${cephfs}=cephfs    ${pool}=data
    ...    ${migrate_folder}=false    ${migrate_gw_ip}=    ${migrate_server}=    ${migrate_fs_type}=cifs    ${migrate_windows_host}=false    ${migrate_path}=    ${migrate_copyup}=open
    ...    ${migrate_account}=    ${migrate_passwd}=    ${migrate_cifsacl}=false    ${migrate_fs_options}=
	Return Code Should be 0    /cgi-bin/ezs3/json/create_shared_folder?name=${name}&gateway_group=${gateway_group}&nfs=${nfs}&smb=${smb}&read_only=${read_only}&s3_folder=${s3_folder}&bucket=${bucket}&mode=${mode}&hidden=${hidden}&write_list=${write_list}&smb_allowed_hosts=${smb_allowed_hosts}&nfs_allowed_hosts=${nfs_allowed_hosts}&guest_ok=${guest_ok}&guest_only=${guest_only}&user_list=${user_list}&cephfs=${cephfs}&pool=${pool}&migrate_folder=${migrate_folder}&migrate_gw_ip=${migrate_gw_ip}&migrate_server=${migrate_server}&migrate_fs_type=${migrate_fs_type}&migrate_windows_host=${migrate_windows_host}&migrate_path=${migrate_path}&migrate_copyup=${migrate_copyup}&migrate_account=${migrate_account}&migrate_passwd=${migrate_passwd}&migrate_cifsacl=${migrate_cifsacl}&migrate_fs_options=${migrate_fs_options}
	
CGI List Shared Folder
	[Arguments]    ${gateway_group}
	${share_folder_list}=    Get Return Json    /cgi-bin/ezs3/json/list_shared_folder?gateway_group=${gateway_group}    /response/folders/folder
    ${share_folder_parse}=    Parse Json    ${share_folder_list}
    [Return]    ${share_folder_parse}
	
CGI List All Nodes
	${node_list}=    Get Return Json    /cgi-bin/ezs3/json/list_all_nodes    /response
	${node_parse}=    Parse Json    ${node_list}
	[Return]    ${node_parse}
	
CGI List All Nodes GW
	[Arguments]    ${gateway_group}
	${gw_node_list}=    Get Return Json    /cgi-bin/ezs3/json/list_all_nodes?gwgroup=${gateway_group}   /response
	${gw_node_parse}=    Parse Json    ${gw_node_list}
	[Return]    ${gw_node_parse}

CGI Delete Multi Shared Folder
	[Arguments]    ${name_list}    ${gateway_group}
	Return Code Should be 0    /cgi-bin/ezs3/json/delete_multi_shared_folder?name_list=${name_list}&gateway_group=${gateway_group}
	
*** Settings ***
Library           SSHLibrary
Library           HttpLibrary.HTTP
Library           Collections
Library           OperatingSystem

*** Keywords ***
Check If SSH Output Is Empty
    [Arguments]    ${cmd}    ${true_false}
    ${output}=    Execute Command    ${cmd}
    Run Keyword If    '${true_false}' == '${true}'    Should Be Empty    ${output}
    ...    ELSE IF    '${true_false}' == '${false}'    Should Not Be Empty    ${output}
    ...    ELSE    Fail    The parameter should be '${true}' or '${false}'

Do SSH CMD
    [Arguments]    ${host_ip}    ${root}    ${root_password}    ${cmd}    ${cmp_flag}=False    ${expect_result}=
    [Documentation]    ${cmp_flag} , it means if we need to do compare operation, the default vaule is False, means don't need to do the comparison.
    log    SSH login
    Open Connection    ${host_ip}
    ${con_output}=    Login    ${USERNAME}    ${PASSWORD}
    Should Contain    ${con_output}    Last login    ${PASSWORD}
    log    Do ssh command
    Start Command    ${cmd}
    ${stdout}=    Read Command Output
    Run Keyword If    ${cmp_flag}==${True}    Should Be Equal As Strings    ${stdout}    ${expect_result}
    [Return]    ${stdout}

Execute Command Successfully
    [Arguments]    ${cmd}
    ${rc}=    Execute Command    ${cmd}    return_stdout=False    return_rc=True
    Should Be Equal As Integers    ${rc}    0

Get Json Path Value
    [Arguments]    ${request}    ${json_path}
    GET    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    ${json_path}
    [Return]    ${rc}

Get Progress
    [Arguments]    ${request_url}    ${json_key}    ${progress}=100
    GET    ${request_url}
    ${body} =    Get Response Body
    ${json_data} =    Get Json Value    ${body}    ${json_key}
    log    ${json_data}
    Should Be Equal As Strings    ${json_data}    ${progress}

Get Return Code
    [Arguments]    ${request}
    GET    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    [Return]    ${rc}

Get Return Json
    [Arguments]    ${request}    ${json_key}=/response
    GET    ${request}
    ${body} =    Get Response Body
    ${json_data} =    Get Json Value    ${body}    ${json_key}
    [Return]    ${json_data}

Open All SSH Connections
    [Arguments]    ${username}    ${password}    @{ip_list}
    : FOR    ${ip}    IN    @{ip_list}
    \    Open Connection    ${ip}    alias=${ip}
    \    Login    ${username}    ${password}

Open HTTP Connection And Log In
    [Arguments]    ${host}    ${username}    ${password}
    Create HTTP Context    ${host}:8080    https
    Return Code Should be 0    /cgi-bin/ezs3/json/login?user_id=${username}&password=${password}

POST Request
    [Arguments]    ${request}    ${post_url}
    Set Request Body    ${request}
    POST    ${post_url}
    Response Status Code Should Equal    200 OK

Post Return Code
    [Arguments]    ${request_body}    ${request}
    Set Request Body    ${request_body}
    POST    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    [Return]    ${rc}

Post Return Code Should be 0
    [Arguments]    ${request_body}    ${request}
    Set Request Body    ${request_body}
    POST    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    Should be Equal    ${rc}    0

Return Code Should be
    [Arguments]    ${request}    ${return_code}=0
    log    ${request}
    GET    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    Should be Equal    ${rc}    ${return_code}

Return Code Should be 0
    [Arguments]    ${request}
    Log    ${request}
    GET    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    Should be Equal    ${rc}    0

Run Output Should Contain
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Run    ${cmd}
    Should Contain    ${output}    ${expect}

SSH Output Should Be Equal
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Execute Command    ${cmd}
    Should be Equal    ${output}    ${expect}

SSH Output Should Match
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Execute Command    ${cmd}
    Should Match    ${output}    ${expect}

SSH Output Should Contain
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Execute Command    ${cmd}
    Should Contain    ${output}    ${expect}

SSH Output Should Not Contain
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Execute Command    ${cmd}
    Should Not Contain    ${output}    ${expect}

Input License
    [Arguments]    ${storage_ip}    ${license_key}
    log    Input license key on node ${storage_ip}
    Wait Until Keyword Succeeds    3 min    5 sec    Return Code Should be    /cgi-bin/ezs3/json/license_set?ip=${storage_ip}&key=${license_key}    0

Get Product Type
    [Documentation]    To get product type, the return value is scaler/controler/converger
    log    Login background, get product type
    ${product_type}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    cat /etc/ezs3/product \ | awk -F " " '{print $NF}'
    log    ${product_type}
    [Return]    ${product_type}

Get ctdb Status
    log    Check ctdb status
    ${ctdb_status}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    ctdb status | grep -i pnn
    Should Contain X Times    ${ctdb_status}    OK    3

*** Settings ***
Library           SSHLibrary
Library           HttpLibrary.HTTP
Library           Collections
Library           OperatingSystem

*** Keywords ***
Check If SSH Output Is Empty
    [Arguments]    ${cmd}    ${true_false}
    ${output}=    Execute Command    ${cmd}
    Run Keyword If    '${true_false}' == '${true}'    Should Be Empty    ${output}
    ...    ELSE IF    '${true_false}' == '${false}'    Should Not Be Empty    ${output}
    ...    ELSE    Fail    The parameter should be '${true}' or '${false}'

Do SSH CMD
    [Arguments]    ${host_ip}    ${root}    ${root_password}    ${cmd}    ${cmp_flag}=False    ${expect_result}=
    [Documentation]    ${cmp_flag} , it means if we need to do compare operation, the default vaule is False, means don't need to do the comparison.
    log    SSH login
    Open Connection    ${host_ip}
    ${con_output}=    Login    ${USERNAME}    ${PASSWORD}
    Should Contain    ${con_output}    Last login    ${PASSWORD}
    log    Do ssh command
    Start Command    ${cmd}
    ${stdout}=    Read Command Output
    Run Keyword If    ${cmp_flag}==${True}    Should Be Equal As Strings    ${stdout}    ${expect_result}
    [Return]    ${stdout}

Execute Command Successfully
    [Arguments]    ${cmd}
    ${rc}=    Execute Command    ${cmd}    return_stdout=False    return_rc=True
    Should Be Equal As Integers    ${rc}    0

Get Json Path Value
    [Arguments]    ${request}    ${json_path}
    GET    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    ${json_path}
    [Return]    ${rc}

Get Progress
    [Arguments]    ${request_url}    ${json_key}    ${progress}=100
    GET    ${request_url}
    ${body} =    Get Response Body
    ${json_data} =    Get Json Value    ${body}    ${json_key}
    log    ${json_data}
    Should Be Equal As Strings    ${json_data}    ${progress}

Get Return Code
    [Arguments]    ${request}
    GET    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    [Return]    ${rc}

Get Return Json
    [Arguments]    ${request}    ${json_key}=/response
    GET    ${request}
    ${body} =    Get Response Body
    ${json_data} =    Get Json Value    ${body}    ${json_key}
    [Return]    ${json_data}

Open All SSH Connections
    [Arguments]    ${username}    ${password}    @{ip_list}
    : FOR    ${ip}    IN    @{ip_list}
    \    Open Connection    ${ip}    alias=${ip}
    \    Login    ${username}    ${password}

Open HTTP Connection And Log In
    [Arguments]    ${host}    ${username}    ${password}
    Create HTTP Context    ${host}:8080    https
    Return Code Should be 0    /cgi-bin/ezs3/json/login?user_id=${username}&password=${password}

POST Request
    [Arguments]    ${request}    ${post_url}
    Set Request Body    ${request}
    POST    ${post_url}
    Response Status Code Should Equal    200 OK

Post Return Code
    [Arguments]    ${request_body}    ${request}
    Set Request Body    ${request_body}
    POST    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    [Return]    ${rc}

Post Return Code Should be 0
    [Arguments]    ${request_body}    ${request}
    Set Request Body    ${request_body}
    POST    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    Should be Equal    ${rc}    0

Return Code Should be
    [Arguments]    ${request}    ${return_code}=0
    log    ${request}
    GET    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    Should be Equal    ${rc}    ${return_code}

Return Code Should be 0
    [Arguments]    ${request}
    Log    ${request}
    GET    ${request}
    ${body} =    Get Response Body
    ${rc} =    Get Json Value    ${body}    /return_code
    Should be Equal    ${rc}    0

Run Output Should Contain
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Run    ${cmd}
    Should Contain    ${output}    ${expect}

SSH Output Should Be Equal
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Execute Command    ${cmd}
    Should be Equal    ${output}    ${expect}

SSH Output Should Match
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Execute Command    ${cmd}
    Should Match    ${output}    ${expect}

SSH Output Should Contain
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Execute Command    ${cmd}
    Should Contain    ${output}    ${expect}

SSH Output Should Not Contain
    [Arguments]    ${cmd}    ${expect}
    ${output} =    Execute Command    ${cmd}
    Should Not Contain    ${output}    ${expect}

Input License
    [Arguments]    ${storage_ip}    ${license_key}
    log    Input license key on node ${storage_ip}
    Wait Until Keyword Succeeds    3 min    5 sec    Return Code Should be    /cgi-bin/ezs3/json/license_set?ip=${storage_ip}&key=${license_key}    0

Get Product Type
    [Documentation]    To get product type, the return value is scaler/controler/converger
    log    Login background, get product type
    ${product_type}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    cat /etc/ezs3/product \ | awk -F " " '{print $NF}'
    log    ${product_type}
    [Return]    ${product_type}

Get ctdb Status
    log    Check ctdb status
    ${ctdb_status}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    ctdb status | grep -i pnn
    Should Contain X Times    ${ctdb_status}    OK    3

Get Cluster Health Status
    [Documentation]    To get cluster current health status
    ${health_status}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    ceph health detail
    Should Be Equal    ${health_status}    HEALTH_OK
    [Return]    ${health_status}

Add Storage Volume
    [Arguments]    ${storage_ip}    ${osd_name}    ${sv_type}=0    ${journal_dev}=data    ${cache_dev}=    ${spare_devs}=%5B%5D
    ...    ${dedup}=False    ${compress}=False    ${BatFlag}=False    @{data_devs}    # BatFlag, Whether the batch mode, default value is False
    log    sv_type vlues is : ${sv_type}
    Run Keyword If    ${sv_type}==${0} and ${BatFlag}==${False}    Set Request Body    host=${storage_ip}&name=${osd_name}&sv_type=${sv_type}&data_devs=%5B%22%2Fdev%2F@{data_devs}[0]%22%5D&journal_dev=data&cache_dev=&spare_devs=%5B%5D&dedup=false&compress=false&enable_osd=false
    ...    ELSE IF    ${sv_type}==${0} and ${BatFlag}==${True}    Set Request Body    host=${storage_ip}&name=${osd_name}&sv_type=${sv_type}&data_devs=%5B%22%2Fdev%2F@{data_devs}[0]%22%2C%22%2Fdev%2F@{data_devs}[1]%22%5D&journal_dev=data&cache_dev=&spare_devs=%5B%5D&dedup=false&compress=false&enable_osd=false
    POST    /cgi-bin/ezs3/json/storage_volume_add
    Response Status Code Should Equal    200 OK

Get OSD State
    [Arguments]    ${storage_ip}    ${osd_state}=ONLINE    ${osd_name}=
    ${result}=    Get Return Json    /cgi-bin/ezs3/json/storage_volume_list?host=${storage_ip}
    log    OSD enable result: ${result}
    ${result}=    evaluate    ${result}
    log    Length of the list
    ${list_len}=    Get Length    ${result}
    log    Length of the list is : ${list_len}
    : FOR    ${i}    IN RANGE    ${list_len}
    \    ${res_lists_tmp}=    Get From List    ${result}    ${i}
    \    Run Keyword If    ${result}[${i}]['name']=='${osd_name}'    Exit For Loop
    ${res_lists}=    Set Variable    ${res_lists_tmp}
    log    Get result of list: ${res_lists}
    ${res_osd_state}=    Get From Dictionary    ${res_lists}    state
    Should Be Equal As Strings    ${res_osd_state}    ${osd_state}
    [Return]    ${osd_state}

Disable and Delete OSD
    [Arguments]    ${storage_ip}    ${osd_name}
    log    Disable OSD
    Return Code Should Be    /cgi-bin/ezs3/json/node_role_disable_osd?ip=${storage_ip}&sv_list=${osd_name}&force=true    0
    Wait Until Keyword Succeeds    4 min    5 sec    Get OSD State    ${storage_ip}    OFFLINE    ${osd_name}
    log    Get cluster status
    Wait Until Keyword Succeeds    4 min    5 sec    Get Cluster Health Status
    sleep    5
    log    Delete OSD
    ${del_osd_body}=    Set Variable    host=${storage_ip}&names=%5B%22${osd_name}%22%5D
    ${delete_osd_url}=    Set Variable    /cgi-bin/ezs3/json/storage_volume_remove
    POST Request    ${del_osd_body}    ${delete_osd_url}
    sleep    5

Enable OSD
    [Arguments]    ${storage_ip}    ${osd_name}    ${storage_network}    ${public_network}
    log    Start to enable OSD again
    Return Code Should Be    /cgi-bin/ezs3/json/node_role_enable_osd?ip=${storage_ip}&sv_list=${osd_name}&cluster_iface=${storage_network}&public_iface=${public_network}    0
    log    Check if OSD is enabled
    Wait Until Keyword Succeeds    4 min    5 sec    Get OSD State    ${storage_ip}    ONLINE    ${osd_name}

Disable OSD
    [Arguments]    ${storage_ip}    ${osd_name}
    log    Disable OSD
    Return Code Should Be    /cgi-bin/ezs3/json/node_role_disable_osd?ip=${storage_ip}&sv_list=${osd_name}&force=true    0
    Wait Until Keyword Succeeds    4 min    5 sec    Get OSD State    ${storage_ip}    OFFLINE    ${osd_name}
    sleep    10

Delete OSD
    [Arguments]    ${storage_ip}    ${osd_name}
    log    Delete OSD
    ${del_osd_body}=    Set Variable    host=${storage_ip}&names=%5B%22${osd_name}%22%5D
    ${delete_osd_url}=    Set Variable    /cgi-bin/ezs3/json/storage_volume_remove
    POST Request    ${del_osd_body}    ${delete_osd_url}
    sleep    5

Create OSD
    [Arguments]    ${osd_name}
    log    Create OSD, to test incremental recovery
    @{data_devs}=    Create List    sdc
    Add Storage Volume    @{STORAGEIP}[0]    ${osd_name}    0    data    \    %5B%5D
    ...    False    False    False    @{data_devs}
    log    Enable OSD
    log    First, get network info
    ${public_network}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    ifconfig | grep -i -B 1 @{PUBLICIP}[0] | grep -v 'inet' | awk -F " " '{print $1}' | sed s'/ //'g
    ${storage_network}=    Do SSH CMD    @{PUBLICIP}[0]    ${USERNAME}    ${PASSWORD}    ifconfig | grep -i -B 1 @{STORAGEIP}[0] | grep -v 'inet' | awk -F " " '{print $1}' | sed s'/ //'g
    log    Public network is: ${public_network}, Storage network is: ${storage_network}
    log    Start to enable OSD
    Return Code Should Be    /cgi-bin/ezs3/json/node_role_enable_osd?ip=@{STORAGEIP}[0]&sv_list=${osd_name}&cluster_iface=${storage_network}&public_iface=${public_network}    0
    log    Check if OSD is enabled
    Wait Until Keyword Succeeds    4 min    5 sec    Get OSD State    @{STORAGEIP}[0]    ONLINE    ${osd_name}
    sleep    20
